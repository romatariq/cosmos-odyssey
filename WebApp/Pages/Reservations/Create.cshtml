@page
@using Helpers
@model WebApp.Pages_Reservations.CreateModel

@{
    ViewData["Title"] = "Create";
}

<h1>Reservation</h1>

<h4>@Model.Trip.Flights.First().From - @Model.Trip.Flights.Last().To</h4>
<hr/>

@if (Model.Trip.ReservableTill < DateTime.UtcNow)
{
    <div class="alert alert-danger" role="alert">
        Trip is no longer reservable. Go back to <a asp-page="/Providers/Index" class="alert-link">all trips</a>.
    </div>
}

@if (Model.Trip.ReservableTill > DateTime.UtcNow)
{
    <div class="alert alert-info" role="alert">
        Trip is reservable till @Model.Trip.ReservableTill.GetFormattedDateTimeHours() UTC.
    </div>

<form method="post">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="d-flex mb-1">
        <div class="form-group col-3">
            <label asp-for="Reservation.FirstName" class="control-label"></label>
            <input asp-for="Reservation.FirstName" class="form-control"/>
            <span asp-validation-for="Reservation.FirstName" class="text-danger"></span>
        </div>
        <div class="form-group col-3 mx-2">
            <label asp-for="Reservation.LastName" class="control-label"></label>
            <input asp-for="Reservation.LastName" class="form-control"/>
            <span asp-validation-for="Reservation.LastName" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group mb-3">
        <input type="hidden" asp-for="TripId"/>
        <input type="submit" value="Reserve" class="btn btn-primary"/>
    </div>
</form>
}

<table class="table">
    <thead>
    <tr>
        <th>From</th>
        <th>To</th>
        <th>Departure</th>
        <th>Arrival</th>
        <th>Company</th>
        <th>Flight time + layover</th>
        <th>Distance</th>
        <th>Price</th>
    </tr>
    </thead>
    <tbody>
    @for(var i = 0; i < Model.Trip.Flights.Count; i++)
    {
        var flight = Model.Trip.Flights[i];
        var flightsCount = Model.Trip.Flights.Count;
        var shouldDisplayLayover = flightsCount > 1 && i != flightsCount - 1;
        var layover = shouldDisplayLayover ? (Model.Trip.Flights[i + 1].Departure - Model.Trip.Flights[i].Arrival).GetFormattedTimeDifference() : "";
        <tr>
            <td>@flight.From</td>
            <td>@flight.To</td>
            <td>@flight.Departure.GetFormattedDateTime()</td>
            <td>@flight.Arrival.GetFormattedDateTime()</td>
            <td>@flight.Company</td>
            <td>@(flight.Arrival.Subtract(flight.Departure).GetFormattedTimeDifference())@(shouldDisplayLayover ? $" + {layover}" : "")</td>
            <td>@flight.Distance</td>
            <td>@flight.Price</td>
        </tr>
        
        if (i == flightsCount - 1 && i != 0)
        {
            <tr>
                <td class="border-bottom-0" colspan="5"></td>
                <td class="border-bottom-0">@((Model.Trip.Arrival - Model.Trip.Departure).GetFormattedTimeDifference())</td>
                <td class="border-bottom-0">@Model.Trip.Distance</td>
                <td class="border-bottom-0">@Model.Trip.Price</td>
            </tr>
        }
    }
    </tbody>
</table>

<div class="text-end fw-bold mt-5">
    Total price: @Model.Trip.Price
</div>